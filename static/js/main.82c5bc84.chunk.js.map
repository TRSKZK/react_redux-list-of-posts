{"version":3,"sources":["api/posts.ts","app/store.ts","components/PostList/PostList.tsx","components/PostList/index.ts","components/FilterForm/index.ts","components/FilterForm/FilterForm.tsx","components/AddPostForm/AddPostForm.tsx","components/AddPostForm/index.ts","components/PostDetailsPage/index.ts","components/PostDetailsPage/PostDetailsPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ALL_POST_URL","getPosts","a","fetch","response","ok","Error","status","statusText","json","posts","addNewPost","body","method","headers","JSON","stringify","newPost","LOAD_POSTS","DELETE_POST","putPostsInStore","type","loadPosts","dispatch","sort","post1","post2","Date","createdAt","getTime","console","error","showPosts","state","innitialState","composedEnhencer","composeWithDevTools","applyMiddleware","thunk","store","createStore","action","filter","post","id","postId","mapDispatch","delete","PostList","connect","connector","React","memo","props","className","map","Card","sx","maxWidth","CardHeader","title","slice","toUpperCase","fontSize","CardContent","Typography","variant","CardActions","Stack","direction","spacing","to","Button","size","onClick","getPostId","color","FilterForm","filterdPosts","useState","filterBy","setFilterBy","Box","component","noValidate","autoComplete","TextField","label","value","onChange","event","preventDefault","target","load","AddPostForm","setTitle","setBody","handleInputChange","name","handleSubmitButton","length","onSubmit","required","endIcon","PostDetailsPage","capitalize","text","useSelector","selectedPost","setSelectedPost","filterPosts","useCallback","toLowerCase","includes","getDeailedPost","useEffect","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82c5bc84.chunk.js","sourcesContent":["import { Post, NewPost } from \"../react-app-env\";\nconst ALL_POST_URL = 'https://mate.academy/students-api/posts';\n\nexport async function getPosts(): Promise<Post[]> {\n  const response = await fetch(ALL_POST_URL);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`)\n  }\n\n  const posts = await response.json();\n\n  return posts;\n};\n\nexport async function addNewPost(body: NewPost): Promise<Post> {\n  const response = await fetch (ALL_POST_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`)\n  }\n\n  const newPost  = await response.json();\n\n  return newPost;\n}\n","import {\n  Dispatch,\n  applyMiddleware,\n  AnyAction,\n  createStore,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from \"redux-thunk\";\nimport { Post } from \"../react-app-env\";\nimport { getPosts } from \"../api/posts\";\n\nconst LOAD_POSTS = 'load/posts';\nconst DELETE_POST = 'delete/post';\n\nexport const putPostsInStore = (posts: Post[]) => ({type: LOAD_POSTS, posts})\n\nexport const loadPosts = () => async (dispatch: Dispatch) => {\n  try {\n    const posts = await getPosts();\n\n    if (posts) {\n      posts.sort((post1: Post, post2: Post) => new Date(post2.createdAt).getTime()\n        - new Date(post1.createdAt).getTime());\n\n      dispatch(putPostsInStore(posts));\n    }\n\n  } catch(error) {\n    console.error(error)\n  }\n};\n\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId});\n\nexport const showPosts = (state: RootState) => state.posts;\n\nexport type RootState = {\n  posts: Post[],\n};\n\nconst innitialState: RootState = {\n  posts: [],\n}\n\nconst postReducer = (state = innitialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.posts],\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: [...state.posts.filter((post: Post) => post.id !== action.postId)],\n      };\n\n    default:\n\n    return state;\n  };\n};\n\nconst composedEnhencer = composeWithDevTools(applyMiddleware(thunk));\n\nconst store = createStore(postReducer, composedEnhencer);\n\nexport default store;\n","import React from 'react';\nimport './PostList.scss';\nimport { Post } from '../../react-app-env';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { CardHeader, Stack } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\nimport { deletePost } from '../../app/store';\nimport { connect, ConnectedProps } from 'react-redux';\n\n\nconst mapDispatch = {\n  delete: deletePost,\n}\n\nconst connector = connect(null, mapDispatch)\n\ntype Props = ConnectedProps<typeof connector> & {\n  posts: Post[],\n  getPostId: (postId: number) => void,\n}\n\nconst PostList: React.FC<Props> = React.memo(\n  (props) => {\n\n    const capitalize = (title: string) => {\n      return title.slice(0,1).toUpperCase() + title.slice(1)\n    }\n\n    return (\n      <div className='card-container'>\n        {props.posts.map((post: Post) => (\n          <Card\n            className=\"card\"\n            key={post.id}\n            sx={{ maxWidth: 275 }}\n          >\n            <CardHeader\n              className=\"card__title\"\n              title={capitalize(post.title)}\n              fontSize=\"12px\"\n            />\n            <CardContent>\n              <Typography\n                variant=\"body1\"\n                className=\"card__body\"\n              >\n                {post.body}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <Stack direction=\"row\" spacing={2}>\n                <NavLink\n                  className=\"card__details-link\"\n                  to=\"/details\"\n                >\n                  <Button\n                    variant=\"contained\"\n                    size=\"small\"\n                    onClick={() => props.getPostId(post.id)}\n                  >\n                    Details\n                  </Button>\n                </NavLink>\n                <Button\n                  size=\"small\"\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => props.delete(post.id)}\n                >\n                  Delete\n                </Button>\n              </Stack>\n            </CardActions>\n          </Card>\n        ))}\n      </div>\n    );\n  },\n);\n\nexport default connector(PostList);\n","import  PostList from './PostList';\n\nexport default PostList;","import { FilterForm } from \"./FilterForm\";\n\nexport default FilterForm;\n","import React, { useState } from 'react';\nimport './FilterForm';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\ninterface Props {\n  filterdPosts: (filterBy: string) => void\n}\n\nexport const FilterForm: React.FC<Props> = React.memo(\n  ({ filterdPosts }) => {\n    const [filterBy, setFilterBy] = useState('');\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      event.preventDefault();\n      setFilterBy(event.target.value);\n      filterdPosts(filterBy);\n    };\n\n    return (\n      <Box\n        component=\"form\"\n        noValidate\n        autoComplete=\"off\"\n      >\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Filter posts\"\n          variant=\"outlined\"\n          value={filterBy}\n          onChange={handleInputChange}\n          className=\"post-filter-form\"\n        />\n      </Box>\n    )\n  },\n)\n","import React, {useState} from 'react';\nimport './AddPostForm.scss';\nimport { Box, Typography, TextField, Button } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport { addNewPost } from '../../api/posts';\nimport { loadPosts } from '../../app/store';\nimport { connect, ConnectedProps } from 'react-redux';\n\nconst mapDispatch = {\n  load: loadPosts,\n};\n\nconst connector = connect(null, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>\n\nconst AddPostForm:React.FC<Props> = React.memo(\n  ({ load }) => {\n    const [title, setTitle] = useState('');\n    const [body, setBody] = useState('');\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      switch (event.target.name) {\n        case 'title':\n          setTitle(event.target.value);\n          break;\n\n        case 'body':\n          setBody(event.target.value);\n          break;\n\n        default:\n          return;\n      }\n    };\n\n    const clearForm = () => {\n      setBody('');\n      setTitle('');\n    }\n\n    const handleSubmitButton = async(event: React.FormEvent) => {\n      event.preventDefault();\n\n      if (title.length > 0 && body.length > 0) {\n        const newPost = await addNewPost({ title, body });\n        if (newPost) {\n          load();\n          clearForm();\n        }\n      }\n    }\n\n    return (\n      <Box\n        className=\"add-post-form\"\n        component=\"form\"\n        action=\"POST\"\n        autoComplete=\"off\"\n        onSubmit={handleSubmitButton}\n      >\n        <Typography component=\"h3\">\n          Add new post\n        </Typography>\n        <TextField\n          className=\"add-post-form__title\"\n          name=\"title\"\n          onChange={handleInputChange}\n          required\n          label=\"Title\"\n          id=\"outlined-required\"\n          data-testid=\"title\"\n          value={title}\n        />\n\n        <TextField\n          className=\"add-post-form__body\"\n          name=\"body\"\n          onChange={handleInputChange}\n          required\n          id=\"outlined-required\"\n          label=\"Body\"\n          value={body}\n        />\n        <Button\n          type=\"submit\"\n          className=\"add-post-form__submit-button\"\n          variant=\"contained\"\n          endIcon={<SendIcon />}\n        >\n          Send\n        </Button>\n      </Box>\n    )\n  },\n);\nexport default connector(AddPostForm);\n","import AddPostForm from './AddPostForm';\n\nexport default AddPostForm;","import { PostDetailsPage } from './PostDetailsPage';\n\nexport default PostDetailsPage;\n","import React from 'react';\nimport { Post } from '../../react-app-env';\nimport './PostDetailsPage.scss';\n\ninterface Props {\n  post: Post | null;\n}\n\nexport const PostDetailsPage: React.FC<Props> = ({ post }) => {\n\n  const capitalize = (text: string | undefined) => {\n    return text ? text.slice(0, 1).toUpperCase() + text.slice(1) : 'no text provided';\n  };\n\n  return (\n    <div className=\"post-details\">\n      <h1 className=\"post-details__title\">\n        {capitalize(post?.title)}\n      </h1>\n      <h2 className=\"post-details__body\">\n        {capitalize(post?.body)}\n      </h2>\n      <p className=\"post-details__date\">\n        {post?.createdAt}\n      </p>\n    </div>\n  )\n};\n","import React, { useEffect, useCallback, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { showPosts, loadPosts } from './app/store';\nimport PostList from './components/PostList';\nimport FilterForm from './components/FilterForm';\nimport { Post } from './react-app-env';\nimport AddPostForm from './components/AddPostForm';\nimport { Routes, Route } from 'react-router';\nimport PostDetailsPage from './components/PostDetailsPage';\n\nconst mapDispatch = {\n  load: loadPosts,\n};\n\nconst connector = connect(null, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst App: React.FC<Props> = ({ load }) => {\n  const posts = useSelector(showPosts);\n  const [filterBy, setFilterBy] = useState('');\n  const [selectedPost, setSelectedPost] = useState<Post | null >(null);\n\n  const filterPosts = useCallback((filterBy: string) => {\n    setFilterBy(filterBy);\n  },[]);\n\n  const filterdPosts = posts.filter((post: Post) => {\n    if (post.title.toLowerCase().includes(filterBy.toLowerCase())\n      || post.body.toLowerCase().includes(filterBy.toLowerCase())) {\n      return post;\n    };\n    return null;\n  });\n\n  const getDeailedPost = useCallback((postId: number) => {\n    setSelectedPost(posts.filter((post: Post) => post.id === postId)[0]);\n  },[posts]);\n\n  useEffect(() => {\n    load();\n\n  }, [load, filterBy]);\n\n\n  return (\n    <Routes>\n      <Route\n        path=\"/\"\n        element={(\n          <div className=\"App\">\n            {filterdPosts.length > 0\n              ? (\n                <PostList\n                  posts={filterdPosts}\n                  getPostId={getDeailedPost}\n                />\n              )\n              : (<p>Post Not found</p>)\n            }\n            <FilterForm filterdPosts={filterPosts} />\n            <AddPostForm />\n          </div>\n        )}\n      />\n      <Route\n        path=\"/details\"\n        element={<PostDetailsPage post={selectedPost}/>}\n      />\n    </Routes>\n  );\n}\n\nexport default connector(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}